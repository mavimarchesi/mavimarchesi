def Reduce(F,Ls,v):
    if IsEmptyList(Ls):
        return v
    return F(Head(Ls),Reduce(F,Tail(Ls),v))

#ESERCIZIO1 BOH
def ReverseRed(Ls,z='EL'):
    def F(x,y):
        return MakeList(y,x)
    return Reduce(Ls,F,z)

from math import sqrt
#ESERCIZIO2
def ComputeAverage(Ls):
    return Sum(Ls)/Lenght(Ls)
OPPURE
def ComputeAvarageB(Ls):
    print(S,L = ReduceR(lambda x,y:(x+y[0],1+y[1]), Ls,v=(0,0)))
'x è il numero della lista, y la coppia t.c. y[0]=sommatoria, y[1]=lunghezza'
    return S/L

#ESERCIZIO3
def ComputeStdDev(Ls):
    S,N=ReduceR(lamba x,y: (x+y[0], 1+y[1], Ls, (0,0)))
    mu=S/N
    t=ReduceR(lambda x,y:y*(x-mu)**2, Ls, 0)
    'mu è la media, t è la funzione'
    return sqrt(t/N)

#ESERCIZIO4 NOPE
'''def Intersect(As, Bs):
    Cs=()
    for x in As:
        if x in Bs:
            if x not in Cs:
                Cs=Cs+(x,)'''
#ESERCIZIO5 nella slide
'Comunque uso il ciclo for, guardo se gli elementi di Ls sono in Bs e se ci sono li tolgo da Ls con L.remove'
'''Il problema evidenziato nella slide è che nel momento in cui ci sono due elementi vicini da togliere e tolgo il primo, tutti gli elementi scalano
di posizione. Questo vuol dire che la posizione del primo elemento (per esempio n=0) è già stata analizzata e secondo il Pc non c'è bisogno di rianalizzarla, anche se in verità il nuovo nel posto n=0 non è più quello di prima, quindi sarebbe da ricontrollare!'''
def Funzione(Ls,Bs)
    for a in Ls
        if a in Bs
            Ls.remove(a)
'Per risolvere il problema di prima faccio'
Cs=Ls[:]
For a in Cs
    if a in Bs
       Ls.remove(a)
