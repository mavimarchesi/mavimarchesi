def Map(F,Ls):
  if IsEmptyList(Ls):
    return EmptyList()
  return MakeList(F(Head(Ls)),Map(F(Tail(Ls))))
Map prende una lista Ls e applica a ciascuno dei suoi elementi la funzione F, restituendo la lista modificata.

def Filter(P,Ls):
  if IsEmptyList(Ls):
    return Ls
  if P(Head(Ls)):
    return MakeList(Head(Ls),Filter(P,Tail(Ls)))
  return Filter(P,Tail(Ls))
La funzione Filter(P, Ls) prende in input un predicato P e una sequenza Ls, e restituisce una nuova sequenza che contiene solo gli elementi che soddisfano il predicato P.

def Reduce(F,Ls,v)
  if IsEmptyList(Ls)
    return v
  return F(Head(Ls),Reduce(F,Tail(Ls),v))
La funzione Reduce(F,Ls,v) prende in input una sequenza Ls, una funzione F e un valore iniziale v, e applica la funzione F nel modo seguente: Dati Ls=[3,7,2,1] e F(x,y):= add(x,y), v = 0

ESERCIZI CON IL REDUCE
#Calcolo del minimo
Min(Ls)
return Reduce(lambda x,y: Min(x,y),Tail(Ls),Head(Ls))

#Calcolo del massimo
Max(Ls)
return Reduce(lambda x,y: Max(x,y),Tail(Ls),Head(Ls))

#Calcolo della lunghezza
--> Reduce(lambda x,y:x+1,Ls,0)

#Conteggio
'-->Length(Filter(lambda x:x==value,Ls))'

#Calcolo della sommatoria
--> Reduce(lambda x,y: x+y,Ls,0)

#Calcolo della produttoria
--> Reduce(lambda x,y:x*y,Ls,1)

#Funzione Map
def Map(F,Ls):
    return Reduce(lambda x:F(x),Ls,Head(Ls))
   
#Funzione Filter
  def Filter(P,Ls):
    return Reduce(lambda x: P(x),Ls,Head(Ls))
